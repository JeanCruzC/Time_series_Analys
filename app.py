import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import datetime as dt
from sklearn.metrics import mean_absolute_error, mean_squared_error
from statsmodels.tsa.seasonal import seasonal_decompose

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ConfiguraciÃ³n de pÃ¡gina â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
st.set_page_config(layout="wide")
st.title("ðŸ“ˆ AnÃ¡lisis de Contactos y Ajustes + KPIs, Errores y Recomendaciones")

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 1. Carga de datos â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
file = st.file_uploader("ðŸ“‚ Carga tu archivo histÃ³rico (CSV o Excel)", type=["csv","xlsx"])
if not file:
    st.stop()

df = pd.read_excel(file) if file.name.endswith("xlsx") else pd.read_csv(file)

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 2. Preprocesamiento â”„â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
df.columns = df.columns.str.strip().str.lower()
df = df.rename(columns={
    'fecha': 'fecha', 'tramo': 'intervalo',
    'planif. contactos': 'planificados', 'contactos': 'reales'
})
# Tipos de dato
df['fecha'] = pd.to_datetime(df['fecha'])
df['intervalo'] = pd.to_datetime(df['intervalo'], format="%H:%M:%S").dt.time
# Campos adicionales
df['dia_semana'] = df['fecha'].dt.day_name()
df['semana_iso'] = df['fecha'].dt.isocalendar().week
df['mes'] = df['fecha'].dt.month
df['nombre_mes'] = df['fecha'].dt.strftime('%B')
# DesvÃ­os
df['desvio'] = df['reales'] - df['planificados']
df['desvio_%'] = (df['desvio'] / df['planificados'].replace(0, np.nan)) * 100
# Orden de dÃ­as
dias_orden = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
df['dia_semana'] = pd.Categorical(df['dia_semana'], categories=dias_orden, ordered=True)

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 2.1 Serie continua â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
df['_dt'] = df.apply(lambda r: dt.datetime.combine(r['fecha'], r['intervalo']), axis=1)
serie_continua = df.groupby('_dt')[['planificados','reales']].sum().sort_index()

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 2.2 Ãšltima semana â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ultima_sem = df['semana_iso'].max()
df_last = df[df['semana_iso'] == ultima_sem].copy()
df_last['_dt'] = df_last.apply(lambda r: dt.datetime.combine(r['fecha'], r['intervalo']), axis=1)
serie_last = df_last.groupby('_dt')[['planificados','reales']].sum().sort_index()

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 3. Ajustes sugeridos â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ajustes = df_last.groupby(['dia_semana','intervalo'])['desvio_%'].mean().reset_index()
ajustes['ajuste_sugerido'] = ajustes['desvio_%'].round(2) / 100
st.subheader(f"ðŸ“† Ajustes sugeridos - Semana ISO {ultima_sem}")
st.dataframe(ajustes, use_container_width=True)

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 4. KPIs de Error â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
st.subheader("ðŸ”¢ KPIs de PlanificaciÃ³n vs. Realidad")
y_true_all, y_pred_all = serie_continua['reales'], serie_continua['planificados']
mae_all  = mean_absolute_error(y_true_all, y_pred_all)
rmse_all = np.sqrt(mean_squared_error(y_true_all, y_pred_all))
mape_all = np.mean(np.abs((y_true_all - y_pred_all) / y_pred_all.replace(0, np.nan))) * 100

y_true_w, y_pred_w = serie_last['reales'], serie_last['planificados']
mae_w  = mean_absolute_error(y_true_w, y_pred_w)
rmse_w = np.sqrt(mean_squared_error(y_true_w, y_pred_w))
mape_w = np.mean(np.abs((y_true_w - y_pred_w) / y_pred_w.replace(0, np.nan))) * 100

st.markdown(
    f"- **MAE:** Total={mae_all:.0f}, Semana={mae_w:.0f}  \\n- **RMSE:** Total={rmse_all:.0f}, Semana={rmse_w:.0f}  \\n- **MAPE:** Total={mape_all:.2f}%, Semana={mape_w:.2f}%"
)

# Recomendaciones
st.subheader("ðŸ’¡ Recomendaciones")
if mape_all > 20:
    st.warning("MAPE global >20%: revisar intervalos con mayor desviaciÃ³n.")
elif mape_w > mape_all:
    st.info(f"MAPE semana ({mape_w:.2f}%) > global ({mape_all:.2f}%). Investigar cambios.")
else:
    st.success("Buen alineamiento planificado vs real.")

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 5. Tabla de errores por intervalo â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
st.subheader("ðŸ“‹ Intervalos con mayor error")
opcion = st.selectbox("Mostrar errores de:", ["Total","Ãšltima Semana"])
errors = serie_continua.copy() if opcion == "Total" else serie_last.copy()
errors['error_abs'] = np.abs(errors['reales'] - errors['planificados'])
errors['MAPE'] = np.abs((errors['reales'] - errors['planificados']) / errors['planificados'].replace(0, np.nan)) * 100
errors_tab = errors.reset_index().groupby('_dt')[['error_abs','MAPE']].mean()
st.dataframe(errors_tab.sort_values('MAPE', ascending=False).head(10))

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 6. Heatmap de desvÃ­os â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
st.subheader("ðŸ”¥ Heatmap: DesvÃ­o % por Intervalo y DÃ­a de la Semana")
heat = df.pivot_table(index='intervalo', columns='dia_semana', values='desvio_%', aggfunc='mean')
fig3, ax3 = plt.subplots(figsize=(10,6))
sns.heatmap(heat, cmap='coolwarm', center=0, ax=ax3)
ax3.set_title('Heatmap DesvÃ­o %')
st.pyplot(fig3)

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 7. Vistas interactivas con anomalÃ­as â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
st.subheader("ðŸ”Ž Vista interactiva: DÃ­a / Semana / Mes")
vista = st.selectbox("Ver por:", ['DÃ­a','Semana','Mes'])
if vista == 'DÃ­a':
    fig = px.line(
        serie_continua.reset_index(), x='_dt', y=['planificados','reales'],
        title='ðŸ“… Contactos DÃ­a',
        labels={'_dt':'Fecha y Hora','value':'Volumen','variable':'Tipo'},
        color_discrete_map={'planificados':'orange','reales':'blue'}
    )
    st.plotly_chart(fig, use_container_width=True)
    decomp = seasonal_decompose(serie_continua['planificados'], model='additive', period=24)
    resid = decomp.resid.dropna(); sigma = resid.std(); anoms = resid[np.abs(resid) > 3*sigma]
    fig_anom = px.line(
        serie_continua.reset_index(), x='_dt', y='planificados', title='ðŸ”´ AnomalÃ­as DÃ­a',
        labels={'_dt':'Fecha y Hora','planificados':'Planificados'},
        color_discrete_map={'planificados':'orange'}
    )
    fig_anom.add_scatter(x=anoms.index, y=serie_continua.loc[anoms.index,'planificados'], mode='markers', marker=dict(color='red'), name='Anom')
    st.plotly_chart(fig_anom, use_container_width=True)
elif vista == 'Semana':
    fig = px.line(
        serie_last.reset_index(), x='_dt', y=['planificados','reales'],
        title=f'ðŸ“† Contactos Semana ISO {ultima_sem}',
        labels={'_dt':'Fecha y Hora','value':'Volumen','variable':'Tipo'},
        color_discrete_map={'planificados':'orange','reales':'blue'}
    )
    st.plotly_chart(fig, use_container_width=True)
    decomp = seasonal_decompose(serie_last['planificados'], model='additive', period=24)
    resid = decomp.resid.dropna(); sigma = resid.std(); anoms = resid[np.abs(resid) > 3*sigma]
    fig_anom = px.line(
        serie_last.reset_index(), x='_dt', y='planificados', title='ðŸ”´ AnomalÃ­as Semana',
        labels={'_dt':'Fecha y Hora','planificados':'Planificados'},
        color_discrete_map={'planificados':'orange'}
    )
    fig_anom.add_scatter(x=anoms.index, y=serie_last.loc[anoms.index,'planificados'], mode='markers', marker=dict(color='red'), name='Anom')
    st.plotly_chart(fig_anom, use_container_width=True)
else:
    daily_m = df.assign(dia=df['fecha'].dt.date).groupby(['nombre_mes','dia','intervalo'])[['planificados','reales']].sum().reset_index()
    monthly_avg = daily_m.groupby(['nombre_mes','intervalo'])[['planificados','reales']].mean().reset_index()
    fig = px.line(
        monthly_avg, x='intervalo', y=['planificados','reales'],
        facet_col='nombre_mes', facet_col_wrap=3, title='ðŸ“Š Curva Horaria Mes',
        labels={'intervalo':'Hora','value':'Volumen','variable':'Tipo'},
        color_discrete_map={'planificados':'orange','reales':'blue'}
    )
    st.plotly_chart(fig, use_container_width=True)
    ts = pd.Series(monthly_avg['planificados'].values, index=pd.to_datetime(monthly_avg['intervalo'].astype(str), format='%H:%M'))
    decomp = seasonal_decompose(ts, model='additive', period=24)
    resid = decomp.resid.dropna(); sigma = resid.std(); anoms = resid[np.abs(resid) > 3*sigma]
    fig_anom = px.line(
        ts.reset_index(), x='index', y=0, title='ðŸ”´ AnomalÃ­as Mes',
        labels={'index':'Hora','0':'Planificados'},
        color_discrete_map={0:'orange'}
    )
    fig_anom.add_scatter(x=anoms.index, y=ts.loc[anoms.index], mode='markers', marker=dict(color='red'), name='Anom')
    st.plotly_chart(fig_anom, use_container_width=True)
